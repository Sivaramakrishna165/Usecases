AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy AWS artifacts for Exercises 3, 4, and 5.

Parameters:
  InputBucketName:
    Type: String
    Description: Name of the input S3 bucket for Step Functions
  OutputBucketName:
    Type: String
    Description: Name of the output S3 bucket for Step Functions

Resources:
  # S3 Buckets
  InputBucket:
    Type: AWS::S3::Bucket:
    Properties:
      BucketName: !Ref InputBucketName

  OutputBucket:
    Type: AWS::S3::Bucket:
    Properties:
      BucketName: !Ref OutputBucketName

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${InputBucketName}/*
                  - !Sub arn:aws:s3:::${OutputBucketName}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Lambda Function for GET /greet
  GreetFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.greet_lambda
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json

          def greet_lambda(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': 'Hello! Welcome to our API!'})
              }
      Runtime: python3.8
      Timeout: 10

  # Lambda Function for POST /echo
  EchoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.echo_lambda
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json

          def echo_lambda(event, context):
              body = json.loads(event['body'])
              return {
                  'statusCode': 200,
                  'body': json.dumps({'echo': body})
              }
      Runtime: python3.8
      Timeout: 10

  # Lambda Function for Step Function
  ProcessJSONFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.process_json
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          s3_client = boto3.client('s3')

          def process_json(event, context):
              input_bucket = event['Records'][0]['s3']['bucket']['name']
              object_key = event['Records'][0]['s3']['object']['key']
              response = s3_client.get_object(Bucket=input_bucket, Key=object_key)
              json_content = json.loads(response['Body'].read())
              for item in json_content:
                  name = item.get('name')
                  height = item.get('height')
                  content = f"The height of {name} is {height} cms."
                  output_key = f"{name}.txt"
                  s3_client.put_object(Bucket=os.environ['OUTPUT_BUCKET'], Key=output_key, Body=content)
              return {
                  'statusCode': 200,
                  'body': json.dumps('Files created successfully!')
              }
      Runtime: python3.8
      Timeout: 10
      Environment:
        OUTPUT_BUCKET: !Ref OutputBucket

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SampleAPI

  # Resource and Method for GET /greet
  GreetResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      PathPart: greet

  GreetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref GreetResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GreetFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200

  # Resource and Method for POST /echo
  EchoResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      PathPart: echo

  EchoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref EchoResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EchoFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200

  # IAM Role for Step Function
  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ProcessJSONFunction.Arn

  # Step Function
  ProcessJSONStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "A Step Function to process JSON files in S3",
          "StartAt": "ProcessS3Event",
          "States": {
            "ProcessS3Event": {
              "Type": "Task",
              "Resource": "${ProcessJSONFunction.Arn}",
              "End": true
            }
          }
        }

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
